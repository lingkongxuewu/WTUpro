C51 COMPILER V9.01   MODBUSCRC                                                             06/01/2018 17:39:15 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MODBUSCRC
OBJECT MODULE PLACED IN .\obj\ModBusCrc.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\ModBusCrc.c OPTIMIZE(SIZE) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND PRIN
                    -T(.\list\ModBusCrc.lst) OBJECT(.\obj\ModBusCrc.obj)

line level    source

   1          /*--------------------------------文*件*信*息-----------------------------
   2          * 文件名：  ModBusCrc.c
   3          * 版　本：  v1.0
   4          * 描  述：  100T双轴 整合后的版本
   5          * 创建人：  
   6          * 日  期：  
   7          --------------------------------------------------------------------------
   8          *当前版本:      v1.0
   9          *修 改 人:
  10          *日　  期:
  11          ----------------------------------修改履历--------------------------------
  12          1、
  13          2、
  14          3、
  15          4、
  16          ------------------------------------------------------------------------*/
  17          #define   __MODBUSCRC_C__
  18          #include  "_Include.h"
  19          /***********************************************************************/
  20          #define         FASTER                  0               //内部采用快速算法，完成通讯数据的CRC运算，占用较大程序空间
  21          #define         MIDDLE                  1               //在快速算法与慢速算法之间的折衷，速度及占用的程序空间处于两者之间
  22          #define         SLOW                    2               //慢速算法，但占用的程序空间最少。
  23          /***********************************************************************/
  24          #define         MODBUS_CRC_MODE         FASTER          //采用算法
  25          /***********************************************************************/
  26          /***********************************************************************
  27           *函数性质；私有
  28           *入口；待运算数据缓冲，数据长度
  29           *出口：数据的CRC码
  30           *功能：对待运算的数据缓冲中给定长度的数据按0X11021的多项式求CRC码，并返回其CRC码
  31          ***********************************************************************/
  32          #if MODBUS_CHECK_ENB==1
  33          #if  MODBUS_CRC_MODE == SLOW
              int16u  ModbusCrcCnt (int8u *ptr, int8u len)
              {       int8u xdata i,j;
                      int16u xdata crc = 0xffff;
                      
                      for(i = 0; i < len; i++)
                      {
                              crc ^=(int16u) *ptr++;
                              for(j = 0; j < 8; j++)
                              {
                                      if(crc & 1)
                                      {
                                              crc >>= 1;
                                              crc ^= 0xa001;
                                      }
                                      else
                                      {
                                              crc >>= 1;
                                      }
                              }
                      }
                      return (crc);
C51 COMPILER V9.01   MODBUSCRC                                                             06/01/2018 17:39:15 PAGE 2   

              }
              /***********************************************************************/
              #elif MODBUS_CRC_MODE == FASTER
  58          static code int8u CrcTabHi[] = {
  59          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  60          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  61          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  62          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  63          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
  64          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  65          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
  66          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  67          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  68          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
  69          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
  70          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  71          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  72          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
  73          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  74          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  75          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  76          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  77          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  78          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  79          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  80          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
  81          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
  82          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  83          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  84          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
  85          };
  86          static code int8u CrcTabLi[] = {
  87          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
  88          0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
  89          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
  90          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
  91          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
  92          0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  93          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
  94          0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
  95          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
  96          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
  97          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
  98          0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  99          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
 100          0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
 101          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
 102          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
 103          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
 104          0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
 105          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
 106          0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
 107          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
 108          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
 109          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
 110          0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
 111          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
 112          0x43, 0x83, 0x41, 0x81, 0x80, 0x40
 113          } ;
 114          int16u  ModbusCrcCnt (int8u *ptr, int8u len)
 115          {       int16u xdata index;
 116   1              int8u xdata crchi,crcli;
C51 COMPILER V9.01   MODBUSCRC                                                             06/01/2018 17:39:15 PAGE 3   

 117   1              
 118   1              
 119   1              crchi = 0xff;
 120   1              crcli = 0xff;
 121   1              
 122   1              while(len--)
 123   1              {
 124   2                      index = crchi ^ *ptr++;
 125   2                      crchi = crcli ^ CrcTabHi[index];
 126   2                      crcli = CrcTabLi[index];
 127   2              }
 128   1              return ((crchi << 8) | crcli);
 129   1      }
 130          
 131          #endif
 132          #endif
 133          
 134          
 135          
 136          
 137          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     89    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
